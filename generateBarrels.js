const fs = require('fs');
const util = require('util');
const fs_writeFile = util.promisify(fs.writeFile);
const path = require('path');
const barrelConfig = require('./barrelConfig.json');

const COMMENTSTRING =
  '// This file is automatically generated, above this line is ignored';

for (const dir of barrelConfig.paths) {
  writeIndex(dir);
}

function isIndexFile(file) {
  return file.includes('index.js');
}

function readDir(pathToDir) {
  const { strArr, dirArr } = fs.readdirSync(pathToDir).reduce(
    (result, p) => {
      const stat = fs.statSync(path.join(pathToDir, p));
      if (!stat.isDirectory()) {
        result.strArr.push(p);
      } else {
        result.dirArr.push(p);
      }

      return result;
    },
    { strArr: [], dirArr: [] },
  );

  let indexFilePath = null;
  let allFilesExceptIndex = [];

  dirArr.forEach(dir => {
    const { allFilesExceptIndex: newDirFiles } = readDir(
      path.join(pathToDir, dir),
    );
    allFilesExceptIndex = [...allFilesExceptIndex, ...newDirFiles];
  });

  strArr.forEach(_x => {
    const x = path.join(pathToDir, _x);
    if (isIndexFile(x)) {
      // if (!checkIndexFile(x))
      //   throw new Error(
      //     `detected index file that isnt generated by barrelbot: ${x}`,
      //   );
      indexFilePath = x;
    } else {
      const filename = x.split('/').pop();
      if (
        filename[0] !== '.' // ignore dotfiles
      ) {
        allFilesExceptIndex.push(x);
      }
    }
  });

  if (!indexFilePath) {
    indexFilePath = `${pathToDir}/index.js`;
  }

  return { indexFilePath, allFilesExceptIndex };
}

function generateExportName(basename) {
  const extensionsToIgnore = ['.factory'];
  const _basename = path.basename(basename);
  const matchRegex = /\.[0-9a-zA-Z]+$/g;
  const [match] = _basename.match(matchRegex) || [];
  if (extensionsToIgnore.includes(match)) return null;
  let replace = '';
  if (match === '.d') replace = 'Desktop';
  if (match === '.m') replace = 'Mobile';
  return _basename.replace(matchRegex, replace);
}

/** return promise of a writing job */
function writeIndex(pathToDir) {
  const { indexFilePath, allFilesExceptIndex } = readDir(pathToDir);
  const finalString = [COMMENTSTRING];

  if (fs.existsSync(indexFilePath)) {
    const fileString = fs
      .readFileSync(indexFilePath, 'utf8')
      .split(COMMENTSTRING)[0];
    if (fileString.length > 0) {
      finalString.unshift(fileString);
    }
  }
  allFilesExceptIndex.forEach(filePath => {
    const newLine = createExportLine(filePath, pathToDir);
    if (newLine) finalString.push(`\n${newLine}`);
  });

  // write
  return fs_writeFile(indexFilePath, finalString.join('').concat('\n'));
}

function createExportLine(filePath, dirPath) {
  const _basename = filePath.replace(`${dirPath}/`, '');
  const basename = _basename.replace(/\.[0-9a-zA-Z]+$/g, '');
  // const basenameExtension = _basename.match(/\.[0-9a-z]+$/g);
  const exportName = generateExportName(basename);
  if (!exportName) return null;
  return `export { default as ${exportName} } from './${basename}';`;
}
